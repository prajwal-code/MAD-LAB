Code for Activity_main.xml: 

<?xml version="1.0" encoding="utf-8"?> 
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" 
xmlns:tools="http://schemas.android.com/tools" 
android:id="@+id/activity_main" 
android:layout_width="match_parent" 
android:layout_height="match_parent" 
android:paddingBottom="@dimen/activity_vertical_margin" 
android:paddingLeft="@dimen/activity_horizontal_margin" 
android:paddingRight="@dimen/activity_horizontal_margin" 
android:paddingTop="@dimen/activity_vertical_margin" 
tools:context="com.example.admin.labprogram7.MainActivity"> 
<Button 
android:text="Show Location" 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:layout_alignParentTop="true" 
android:layout_centerHorizontal="true" 
android:layout_marginTop="15dp" 
android:id="@+id/button" /> 
</RelativeLayout> 


<?xml version="1.0" encoding="utf-8"?> 
<manifest xmlns:android="http://schemas.android.com/apk/res/android" 
package="com.example.admin.labprogram7"> 
<application 
android:allowBackup="true" 
android:icon="@mipmap/ic_launcher" 
android:label="@string/app_name" 
android:supportsRtl="true" 
android:theme="@style/AppTheme"> 
<activity android:name=".MainActivity"> 
<intent-filter> 
<action android:name="android.intent.action.MAIN" /> 
<category android:name="android.intent.category.LAUNCHER" /> 
</intent-filter> 
</activity> 
</application> 
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /> 
<uses-permission android:name="android.permission.INTERNET" /> 
</manifest> 


Code for MainActivity.java: 

 
package com.example.admin.labprogram7; 
import android.support.v7.app.AppCompatActivity; 
import android.app.Activity; 
import android.view.View; 
import android.widget.Button; 
import android.widget.Toast; 
import android.support.v7.app.AppCompatActivity; 
import android.os.Bundle; 
import gps.location.GPStrace; 
public class MainActivity extends AppCompatActivity { 
Button btnShowLocation; 
GPStrace gps; 
@Override 
protected void onCreate(Bundle savedInstanceState) { 
super.onCreate(savedInstanceState); 
setContentView(R.layout.activity_main); 
btnShowLocation = (Button)findViewById(R.id.Show_Location); 
btnShowLocation.setOnClickListener(new View.OnClickListener() { 
@Override 
public void onClick(View v) { 
gps = new GPStrace(MainActivity.this); 
if (gps.getLocation() != null) { 
double latitude = gps.getLatitude(); 
double longitude = gps.getLongitude(); 
Toast.makeText(getApplicationContext(), "Your Location is \nLat:" 
+ latitude + "\nLong:" + longitude, Toast.LENGTH_LONG).show(); 
} else { 
//gps.showSettingAlert(); 
} 
} 
}); 
} 
}




GPStrace.java code: 

packagegps.location; 

import android.app.AlertDialog; 
import android.app.Service; 
import android.content.Context; 
import android.content.DialogInterface; 
import android.content.Intent; 
import android.location.Location; 
import android.location.LocationListener; 
import android.location.LocationManager; 
import android.os.Bundle; 
import android.os.IBinder; 
import android.provider.Settings; 
public class GPStrace extends Service implements LocationListener { 
private final Context mContext; 
// flag for GPS status 
boolean isGPSEnabled = false; 
// flag for network status 
boolean isNetworkEnabled = false; 
boolean canGetLocation = false; 
Location location;
double latitude; 
double longitude; 

private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; 

private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; 
protected LocationManager locationManager; 
public GPStrace(Context context) { 
this.mContext = context; 
getLocation(); 
} 
public Location getLocation() { 
try { 
locationManager = (LocationManager) mContext 
.getSystemService(LOCATION_SERVICE); 
 
isGPSEnabled = locationManager 
.isProviderEnabled(LocationManager.GPS_PROVIDER); 
isNetworkEnabled = locationManager 
.isProviderEnabled(LocationManager.NETWORK_PROVIDER); 
if (!isGPSEnabled && !isNetworkEnabled) { 
} else { 
this.canGetLocation = true; 
if (isNetworkEnabled) { 
locationManager.requestLocationUpdates( 
LocationManager.NETWORK_PROVIDER, 
MIN_TIME_BW_UPDATES, 
MIN_DISTANCE_CHANGE_FOR_UPDATES, this); 

if (locationManager != null) { 
location = locationManager 
.getLastKnownLocation(LocationManager.NETWORK_PROVIDER); 
if (location != null) { 
latitude = location.getLatitude(); 
longitude = location.getLongitude(); 
} 
} 
} 
if (isGPSEnabled) { 
if (location == null) { 
locationManager.requestLocationUpdates( 
LocationManager.GPS_PROVIDER, 
MIN_TIME_BW_UPDATES, 
MIN_DISTANCE_CHANGE_FOR_UPDATES, this); 
// Log.d("GPS Enabled", "GPS Enabled"); 
if (locationManager != null) { 
location = locationManager 
.getLastKnownLocation(LocationManager.GPS_PROVIDER); 
if (location != null) { 
latitude = location.getLatitude(); 
longitude = location.getLongitude(); 
} 
} 
} 
} 
} 
} catch (Exception e) { 
e.printStackTrace(); 
} 
return location; 
} 
@Override 
public void onLocationChanged(Location location) { 
} 
@Override 
public void onProviderDisabled(String provider) { 
} 
@Override 
public void onProviderEnabled(String provider) { 


C:\Users\Admin\Desktop\p7-output1.png 
} 
@Override 
public void onStatusChanged(String provider, int status, Bundle extras) { 
} 
@Override 
public IBinder onBind(Intent arg0) { 
return null; 
} 

public double getLatitude(){ 
if(location != null){ 
latitude = location.getLatitude(); 
} 

return latitude; 
} 

public double getLongitude(){ 
if(location != null){ 
longitude = location.getLongitude(); 
} 
return longitude; 
} 
} 
 